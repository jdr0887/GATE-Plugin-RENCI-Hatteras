#!/bin/bash

#set -e

if [ ! -e "$HOME/.jlrmrc" ]; then
    echo 'Unable to find ~/.jlrmrc - Exiting...'
    exit 1                                                 
fi                                               
. $HOME/.jlrmrc                                 

# this will contain logs/execute/spool
UUID=`/usr/bin/uuidgen`
HOSTNAME=`/bin/hostname -s`
CURRENT_DATE=`date +%Y-%m-%d`
LOCAL_DIR=$JLRM_HOME/glideins/$CURRENT_DATE/$UUID

echo "LOCAL_DIR = $LOCAL_DIR"
echo "HOSTNAME = $HOSTNAME"

mkdir -p $LOCAL_DIR/execute
mkdir -p $LOCAL_DIR/log
mkdir -p $LOCAL_DIR/spool

# create an env file for easy sourcing
cat >$LOCAL_DIR/env.sh <<EOF
#!/bin/bash
export PATH=$CONDOR_HOME/bin:$CONDOR_HOME/sbin:$PATH
export CONDOR_CONFIG=$LOCAL_DIR/condor_config
EOF

. $LOCAL_DIR/env.sh

# fix the condor config file
cp ${remoteWorkDir}/condor_config $LOCAL_DIR/

echo "RELEASE_DIR = $CONDOR_HOME" >> $LOCAL_DIR/condor_config
echo "LOCAL_DIR = $LOCAL_DIR" >> $LOCAL_DIR/condor_config
echo 'NUM_CPUS=${numberOfProcessors}' >> $LOCAL_DIR/condor_config
echo 'CONDOR_HOST=${collectorHost}' >> $LOCAL_DIR/condor_config
echo 'FILESYSTEM_DOMAIN=${collectorHost}' >> $LOCAL_DIR/condor_config
echo 'GLIDEIN_START_TIME = "${glideinStartTime}"' >> $LOCAL_DIR/condor_config
echo 'JLRM_SITE_NAME = "${jlrmSiteName}"' >> $LOCAL_DIR/condor_config
echo 'JLRM_USER = "${jlrmUser}"' >> $LOCAL_DIR/condor_config
echo 'ALLOW_WRITE_COLLECTOR = $(ALLOW_WRITE), $(FLOCK_FROM), ${hostAllowWrite}' >> $LOCAL_DIR/condor_config
echo 'ALLOW_WRITE_STARTD    = $(ALLOW_WRITE), $(FLOCK_FROM), ${hostAllowWrite}' >> $LOCAL_DIR/condor_config
echo 'ALLOW_READ_COLLECTOR  = $(ALLOW_READ), $(FLOCK_FROM), ${hostAllowRead}' >> $LOCAL_DIR/condor_config
echo 'ALLOW_READ_STARTD     = $(ALLOW_READ), $(FLOCK_FROM), ${hostAllowRead}' >> $LOCAL_DIR/condor_config

condor_master -f -r ${maxRunTime}

#-f: Causes the daemon to start up in the foreground. Instead of forking, the daemon runs in the foreground.
#-r MINUTES: Causes the daemon to set a timer, upon expiration of which, it sends itself a SIGTERM for graceful shutdown.
